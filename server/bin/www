#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('learning:server');
var http = require('http');
var { Server } = require('socket.io');
const mediasoup = require('mediasoup');  // <<== ADD THIS

const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: 'http://localhost:3000', credentials: true }
});

const userSocketMap = {};
const db = require('../db');

// --- your existing chat helper ---
function removeUserBySocketId(id) {
  for (const [user, sockId] of Object.entries(userSocketMap)) {
    if (sockId === id) {
      delete userSocketMap[user];
      break;
    }
  }
}

// --- mediasoup setup ---
let worker;
let router;

(async () => {
  worker = await mediasoup.createWorker();
  router = await worker.createRouter({ mediaCodecs: [
    {
      kind: 'audio',
      mimeType: 'audio/opus',
      clockRate: 48000,
      channels: 2,
    },
    {
      kind: 'video',
      mimeType: 'video/VP8',
      clockRate: 90000,
      parameters: {},
    },
  ]});
})();
        // username -> socket.id
const userTransports = {};             // (Optional: Global list if needed, but you can rely on userTransports now)

io.on('connection', socket => {
  console.log('New socket connected:', socket.id);

  // --- CHAT handling (already working) ---
  socket.on('register_user', username => {
    console.log('>>> [server] register_user for', username);
    userSocketMap[username] = socket.id;
  });

  socket.on('send_message', async ({ sender, receiver, message }) => {
    console.log('>>> [server] send_message payload:', sender, receiver, message);
    try {
      await db.query(
        'INSERT INTO messages (sender, receiver, message) VALUES (?, ?, ?)',
        [sender, receiver, message]
      );
      const toSocket = userSocketMap[receiver];
      if (toSocket) {
        io.to(toSocket).emit('new_message', { sender, message });
      }
    } catch (err) {
      console.error('Error in send_message handler:', err);
    }
  });

  // --- VIDEO Q&A handling (new) ---

  socket.on('getRtpCapabilities', (callback) => {
    callback(router.rtpCapabilities);
  });

  socket.on('createProducerTransport', async (callback) => {
    try {
      const transport = await router.createWebRtcTransport({
        listenIps: [{ ip: '127.0.0.1', announcedIp: null }]
      });

      userTransports[socket.id] = {
        producerTransport: transport,
        consumerTransports: [],
        producer: null
      };

      callback({
        id: transport.id,
        iceParameters: transport.iceParameters,
        iceCandidates: transport.iceCandidates,
        dtlsParameters: transport.dtlsParameters,
      });

      transport.on('dtlsstatechange', dtlsState => {
        if (dtlsState === 'closed') transport.close();
      });

    } catch (error) {
      console.error('Error creating producer transport:', error);
      callback({ error: error.message });
    }
  });

  socket.on('connectProducerTransport', async ({ dtlsParameters }, callback) => {
    const userData = userTransports[socket.id];
    if (!userData || !userData.producerTransport) {
      console.error('No producer transport found for socket:', socket.id);
      return;
    }
    try {
      if (userData.producerTransport.dtlsState === 'new') {
        await userData.producerTransport.connect({ dtlsParameters });
      }
      callback();
    } catch (error) {
      console.error('Error connecting producer transport:', error);
      callback({ error: error.message });
    }
  });

  socket.on('produce', async ({ kind, rtpParameters }, callback) => {
    const userData = userTransports[socket.id];
    if (!userData || !userData.producerTransport) {
      console.error('No producer transport found for producing');
      return;
    }
    try {
      const producer = await userData.producerTransport.produce({ kind, rtpParameters });
      userData.producer = producer;

      callback({ id: producer.id });

      producer.on('transportclose', () => {
        producer.close();
      });

    } catch (error) {
      console.error('Error producing:', error);
      callback({ error: error.message });
    }
  });

  socket.on('createConsumerTransport', async (callback) => {
    try {
      const transport = await router.createWebRtcTransport({
        listenIps: [{ ip: '127.0.0.1', announcedIp: null }]
      });

      if (!userTransports[socket.id]) {
        userTransports[socket.id] = { producerTransport: null, consumerTransports: [], producer: null };
      }
      userTransports[socket.id].consumerTransports.push(transport);

      callback({
        id: transport.id,
        iceParameters: transport.iceParameters,
        iceCandidates: transport.iceCandidates,
        dtlsParameters: transport.dtlsParameters,
      });

      transport.on('dtlsstatechange', dtlsState => {
        if (dtlsState === 'closed') transport.close();
      });

    } catch (error) {
      console.error('Error creating consumer transport:', error);
      callback({ error: error.message });
    }
  });

  socket.on('connectConsumerTransport', async ({ dtlsParameters, transportId }, callback) => {
    const userData = userTransports[socket.id];
    if (!userData) {
      console.error('No user data for connecting consumer transport');
      return;
    }
    const transport = userData.consumerTransports.find(t => t.id === transportId);
    if (!transport) {
      console.error('No consumer transport found with id:', transportId);
      return;
    }
    try {
      if (transport.dtlsState === 'new') {
        await transport.connect({ dtlsParameters });
      }
      callback();
    } catch (error) {
      console.error('Error connecting consumer transport:', error);
      callback({ error: error.message });
    }
  });

  socket.on('consume', async ({ rtpCapabilities, transportId }, callback) => {
    const userData = userTransports[socket.id];
    if (!userData || !userData.producer) {
      console.error('No producer available to consume');
      return;
    }
    const transport = userData.consumerTransports.find(t => t.id === transportId);
    if (!transport) {
      console.error('Consumer transport not found');
      return;
    }
    try {
      if (!router.canConsume({ producerId: userData.producer.id, rtpCapabilities })) {
        console.error('Cannot consume');
        return;
      }

      const consumer = await transport.consume({
        producerId: userData.producer.id,
        rtpCapabilities,
        paused: false,
      });

      callback({
        id: consumer.id,
        producerId: userData.producer.id,
        kind: consumer.kind,
        rtpParameters: consumer.rtpParameters,
      });

    } catch (error) {
      console.error('Error consuming:', error);
      callback({ error: error.message });
    }
  });

  socket.on('disconnect', () => {
    console.log('Socket disconnected:', socket.id);
    const userData = userTransports[socket.id];
    if (userData) {
      if (userData.producerTransport) userData.producerTransport.close();
      if (userData.producer) userData.producer.close();
      userData.consumerTransports.forEach(t => t.close());
      delete userTransports[socket.id];
    }
    removeUserBySocketId(socket.id);
  });
});

// --- server listen ---
var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// --- helpers (unchanged) ---
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
